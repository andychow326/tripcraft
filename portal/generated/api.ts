/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CityResponse
 */
export interface CityResponse {
    /**
     * 
     * @type {number}
     * @memberof CityResponse
     */
    'totalCount': number;
    /**
     * 
     * @type {number}
     * @memberof CityResponse
     */
    'nextPageIndex': number | null;
    /**
     * 
     * @type {Array<CitySchema>}
     * @memberof CityResponse
     */
    'results': Array<CitySchema>;
}
/**
 * 
 * @export
 * @interface CitySchema
 */
export interface CitySchema {
    /**
     * 
     * @type {number}
     * @memberof CitySchema
     */
    'id': number;
    /**
     * 
     * @type {Translations}
     * @memberof CitySchema
     */
    'name': Translations;
    /**
     * 
     * @type {number}
     * @memberof CitySchema
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof CitySchema
     */
    'longitude': number;
    /**
     * 
     * @type {CountrySchema}
     * @memberof CitySchema
     */
    'country': CountrySchema;
    /**
     * 
     * @type {StateSchema}
     * @memberof CitySchema
     */
    'state': StateSchema;
}
/**
 * 
 * @export
 * @interface CountryResponse
 */
export interface CountryResponse {
    /**
     * 
     * @type {number}
     * @memberof CountryResponse
     */
    'totalCount': number;
    /**
     * 
     * @type {number}
     * @memberof CountryResponse
     */
    'nextPageIndex': number | null;
    /**
     * 
     * @type {Array<CountrySchema>}
     * @memberof CountryResponse
     */
    'results': Array<CountrySchema>;
}
/**
 * 
 * @export
 * @interface CountrySchema
 */
export interface CountrySchema {
    /**
     * 
     * @type {number}
     * @memberof CountrySchema
     */
    'id': number;
    /**
     * 
     * @type {Translations}
     * @memberof CountrySchema
     */
    'name': Translations;
    /**
     * 
     * @type {string}
     * @memberof CountrySchema
     */
    'iso3': string;
    /**
     * 
     * @type {string}
     * @memberof CountrySchema
     */
    'iso2': string;
    /**
     * 
     * @type {number}
     * @memberof CountrySchema
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof CountrySchema
     */
    'longitude': number;
    /**
     * 
     * @type {string}
     * @memberof CountrySchema
     */
    'emoji': string;
    /**
     * 
     * @type {RegionSchema}
     * @memberof CountrySchema
     */
    'region': RegionSchema | null;
    /**
     * 
     * @type {SubRegionSchema}
     * @memberof CountrySchema
     */
    'subRegion': SubRegionSchema | null;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'accessToken': string;
}
/**
 * 
 * @export
 * @interface PlanConfigDetailDestinationSchema
 */
export interface PlanConfigDetailDestinationSchema {
    /**
     * 
     * @type {string}
     * @memberof PlanConfigDetailDestinationSchema
     */
    'type': PlanConfigDetailDestinationSchemaTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof PlanConfigDetailDestinationSchema
     */
    'id': number;
    /**
     * 
     * @type {Translations}
     * @memberof PlanConfigDetailDestinationSchema
     */
    'name'?: Translations | null;
    /**
     * 
     * @type {string}
     * @memberof PlanConfigDetailDestinationSchema
     */
    'countryIso2'?: string | null;
}

export const PlanConfigDetailDestinationSchemaTypeEnum = {
    Country: 'country',
    State: 'state',
    City: 'city'
} as const;

export type PlanConfigDetailDestinationSchemaTypeEnum = typeof PlanConfigDetailDestinationSchemaTypeEnum[keyof typeof PlanConfigDetailDestinationSchemaTypeEnum];

/**
 * 
 * @export
 * @interface PlanConfigDetailScheduleSchema
 */
export interface PlanConfigDetailScheduleSchema {
    /**
     * 
     * @type {string}
     * @memberof PlanConfigDetailScheduleSchema
     */
    'place': string;
    /**
     * 
     * @type {string}
     * @memberof PlanConfigDetailScheduleSchema
     */
    'timeStart': string;
    /**
     * 
     * @type {string}
     * @memberof PlanConfigDetailScheduleSchema
     */
    'timeEnd': string;
}
/**
 * 
 * @export
 * @interface PlanConfigDetailSchemaInput
 */
export interface PlanConfigDetailSchemaInput {
    /**
     * 
     * @type {string}
     * @memberof PlanConfigDetailSchemaInput
     */
    'date': string;
    /**
     * 
     * @type {Array<PlanConfigDetailDestinationSchema>}
     * @memberof PlanConfigDetailSchemaInput
     */
    'destinations': Array<PlanConfigDetailDestinationSchema>;
    /**
     * 
     * @type {{ [key: string]: Translations; }}
     * @memberof PlanConfigDetailSchemaInput
     */
    'destinationHolidays'?: { [key: string]: Translations; };
    /**
     * 
     * @type {Array<PlanConfigDetailScheduleSchema>}
     * @memberof PlanConfigDetailSchemaInput
     */
    'schedules': Array<PlanConfigDetailScheduleSchema>;
}
/**
 * 
 * @export
 * @interface PlanConfigDetailSchemaOutput
 */
export interface PlanConfigDetailSchemaOutput {
    /**
     * 
     * @type {string}
     * @memberof PlanConfigDetailSchemaOutput
     */
    'date': string;
    /**
     * 
     * @type {Array<PlanConfigDetailDestinationSchema>}
     * @memberof PlanConfigDetailSchemaOutput
     */
    'destinations': Array<PlanConfigDetailDestinationSchema>;
    /**
     * 
     * @type {{ [key: string]: Translations; }}
     * @memberof PlanConfigDetailSchemaOutput
     */
    'destinationHolidays'?: { [key: string]: Translations; };
    /**
     * 
     * @type {Array<PlanConfigDetailScheduleSchema>}
     * @memberof PlanConfigDetailSchemaOutput
     */
    'schedules': Array<PlanConfigDetailScheduleSchema>;
}
/**
 * 
 * @export
 * @interface PlanConfigSchemaInput
 */
export interface PlanConfigSchemaInput {
    /**
     * 
     * @type {string}
     * @memberof PlanConfigSchemaInput
     */
    'dateStart': string;
    /**
     * 
     * @type {string}
     * @memberof PlanConfigSchemaInput
     */
    'dateEnd': string;
    /**
     * 
     * @type {Array<PlanConfigDetailSchemaInput>}
     * @memberof PlanConfigSchemaInput
     */
    'details'?: Array<PlanConfigDetailSchemaInput>;
}
/**
 * 
 * @export
 * @interface PlanConfigSchemaOutput
 */
export interface PlanConfigSchemaOutput {
    /**
     * 
     * @type {string}
     * @memberof PlanConfigSchemaOutput
     */
    'dateStart': string;
    /**
     * 
     * @type {string}
     * @memberof PlanConfigSchemaOutput
     */
    'dateEnd': string;
    /**
     * 
     * @type {Array<PlanConfigDetailSchemaOutput>}
     * @memberof PlanConfigSchemaOutput
     */
    'details'?: Array<PlanConfigDetailSchemaOutput>;
}
/**
 * 
 * @export
 * @interface PlanMultipleResponse
 */
export interface PlanMultipleResponse {
    /**
     * 
     * @type {Array<PlanSchema>}
     * @memberof PlanMultipleResponse
     */
    'results': Array<PlanSchema>;
}
/**
 * 
 * @export
 * @interface PlanRequest
 */
export interface PlanRequest {
    /**
     * 
     * @type {string}
     * @memberof PlanRequest
     */
    'name': string;
    /**
     * 
     * @type {PlanConfigSchemaInput}
     * @memberof PlanRequest
     */
    'config': PlanConfigSchemaInput;
}
/**
 * 
 * @export
 * @interface PlanSchema
 */
export interface PlanSchema {
    /**
     * 
     * @type {string}
     * @memberof PlanSchema
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PlanSchema
     */
    'name': string;
    /**
     * 
     * @type {PlanConfigSchemaOutput}
     * @memberof PlanSchema
     */
    'config': PlanConfigSchemaOutput;
}
/**
 * 
 * @export
 * @interface PlanSingleResponse
 */
export interface PlanSingleResponse {
    /**
     * 
     * @type {string}
     * @memberof PlanSingleResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PlanSingleResponse
     */
    'name': string;
    /**
     * 
     * @type {PlanConfigSchemaOutput}
     * @memberof PlanSingleResponse
     */
    'config': PlanConfigSchemaOutput;
}
/**
 * 
 * @export
 * @interface RegionResponse
 */
export interface RegionResponse {
    /**
     * 
     * @type {Array<RegionSchema>}
     * @memberof RegionResponse
     */
    'results': Array<RegionSchema>;
}
/**
 * 
 * @export
 * @interface RegionSchema
 */
export interface RegionSchema {
    /**
     * 
     * @type {number}
     * @memberof RegionSchema
     */
    'id': number;
    /**
     * 
     * @type {Translations}
     * @memberof RegionSchema
     */
    'name': Translations;
}
/**
 * 
 * @export
 * @interface SignupRequest
 */
export interface SignupRequest {
    /**
     * 
     * @type {string}
     * @memberof SignupRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SignupRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof SignupRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface SignupResponse
 */
export interface SignupResponse {
    /**
     * 
     * @type {string}
     * @memberof SignupResponse
     */
    'accessToken': string;
}
/**
 * 
 * @export
 * @interface StateResponse
 */
export interface StateResponse {
    /**
     * 
     * @type {number}
     * @memberof StateResponse
     */
    'totalCount': number;
    /**
     * 
     * @type {number}
     * @memberof StateResponse
     */
    'nextPageIndex': number | null;
    /**
     * 
     * @type {Array<StateSchema>}
     * @memberof StateResponse
     */
    'results': Array<StateSchema>;
}
/**
 * 
 * @export
 * @interface StateSchema
 */
export interface StateSchema {
    /**
     * 
     * @type {number}
     * @memberof StateSchema
     */
    'id': number;
    /**
     * 
     * @type {Translations}
     * @memberof StateSchema
     */
    'name': Translations;
    /**
     * 
     * @type {number}
     * @memberof StateSchema
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof StateSchema
     */
    'longitude': number;
    /**
     * 
     * @type {CountrySchema}
     * @memberof StateSchema
     */
    'country': CountrySchema;
}
/**
 * 
 * @export
 * @interface SubRegionResponse
 */
export interface SubRegionResponse {
    /**
     * 
     * @type {Array<SubRegionSchema>}
     * @memberof SubRegionResponse
     */
    'results': Array<SubRegionSchema>;
}
/**
 * 
 * @export
 * @interface SubRegionSchema
 */
export interface SubRegionSchema {
    /**
     * 
     * @type {number}
     * @memberof SubRegionSchema
     */
    'id': number;
    /**
     * 
     * @type {Translations}
     * @memberof SubRegionSchema
     */
    'name': Translations;
    /**
     * 
     * @type {RegionSchema}
     * @memberof SubRegionSchema
     */
    'region': RegionSchema;
}
/**
 * 
 * @export
 * @interface Translations
 */
export interface Translations {
    /**
     * 
     * @type {string}
     * @memberof Translations
     */
    'en': string;
    /**
     * 
     * @type {string}
     * @memberof Translations
     */
    'zhHant': string;
    /**
     * 
     * @type {string}
     * @memberof Translations
     */
    'zhHans': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary  Auth Login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost: async (loginRequest: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('authLoginPost', 'loginRequest', loginRequest)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  Auth Signup
         * @param {SignupRequest} signupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSignupPost: async (signupRequest: SignupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signupRequest' is not null or undefined
            assertParamExists('authSignupPost', 'signupRequest', signupRequest)
            const localVarPath = `/auth/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary  Auth Login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginPost(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLoginPost(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary  Auth Signup
         * @param {SignupRequest} signupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSignupPost(signupRequest: SignupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authSignupPost(signupRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authSignupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary  Auth Login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost(loginRequest: LoginRequest, options?: any): AxiosPromise<LoginResponse> {
            return localVarFp.authLoginPost(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  Auth Signup
         * @param {SignupRequest} signupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSignupPost(signupRequest: SignupRequest, options?: any): AxiosPromise<SignupResponse> {
            return localVarFp.authSignupPost(signupRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary  Auth Login
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLoginPost(loginRequest: LoginRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authLoginPost(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  Auth Signup
     * @param {SignupRequest} signupRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authSignupPost(signupRequest: SignupRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authSignupPost(signupRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary  Healthz
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthzGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/healthz`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  World City
         * @param {string | null} [name] 
         * @param {number | null} [id] 
         * @param {number | null} [stateId] 
         * @param {number | null} [countryId] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        worldCityGet: async (name?: string | null, id?: number | null, stateId?: number | null, countryId?: number | null, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/world/city`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (stateId !== undefined) {
                localVarQueryParameter['stateId'] = stateId;
            }

            if (countryId !== undefined) {
                localVarQueryParameter['countryId'] = countryId;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  World Country
         * @param {string | null} [name] 
         * @param {number | null} [id] 
         * @param {number | null} [subRegionId] 
         * @param {number | null} [regionId] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        worldCountryGet: async (name?: string | null, id?: number | null, subRegionId?: number | null, regionId?: number | null, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/world/country`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (subRegionId !== undefined) {
                localVarQueryParameter['subRegionId'] = subRegionId;
            }

            if (regionId !== undefined) {
                localVarQueryParameter['regionId'] = regionId;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  World Region
         * @param {string | null} [name] 
         * @param {number | null} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        worldRegionGet: async (name?: string | null, id?: number | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/world/region`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  World State
         * @param {string | null} [name] 
         * @param {number | null} [id] 
         * @param {number | null} [countryId] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        worldStateGet: async (name?: string | null, id?: number | null, countryId?: number | null, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/world/state`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (countryId !== undefined) {
                localVarQueryParameter['countryId'] = countryId;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  World Sub Region
         * @param {string | null} [name] 
         * @param {number | null} [id] 
         * @param {number | null} [regionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        worldSubRegionGet: async (name?: string | null, id?: number | null, regionId?: number | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/world/sub_region`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (regionId !== undefined) {
                localVarQueryParameter['regionId'] = regionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary  Healthz
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthzGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthzGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.healthzGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary  World City
         * @param {string | null} [name] 
         * @param {number | null} [id] 
         * @param {number | null} [stateId] 
         * @param {number | null} [countryId] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async worldCityGet(name?: string | null, id?: number | null, stateId?: number | null, countryId?: number | null, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.worldCityGet(name, id, stateId, countryId, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.worldCityGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary  World Country
         * @param {string | null} [name] 
         * @param {number | null} [id] 
         * @param {number | null} [subRegionId] 
         * @param {number | null} [regionId] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async worldCountryGet(name?: string | null, id?: number | null, subRegionId?: number | null, regionId?: number | null, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CountryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.worldCountryGet(name, id, subRegionId, regionId, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.worldCountryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary  World Region
         * @param {string | null} [name] 
         * @param {number | null} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async worldRegionGet(name?: string | null, id?: number | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.worldRegionGet(name, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.worldRegionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary  World State
         * @param {string | null} [name] 
         * @param {number | null} [id] 
         * @param {number | null} [countryId] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async worldStateGet(name?: string | null, id?: number | null, countryId?: number | null, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.worldStateGet(name, id, countryId, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.worldStateGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary  World Sub Region
         * @param {string | null} [name] 
         * @param {number | null} [id] 
         * @param {number | null} [regionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async worldSubRegionGet(name?: string | null, id?: number | null, regionId?: number | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubRegionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.worldSubRegionGet(name, id, regionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.worldSubRegionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary  Healthz
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthzGet(options?: any): AxiosPromise<any> {
            return localVarFp.healthzGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  World City
         * @param {string | null} [name] 
         * @param {number | null} [id] 
         * @param {number | null} [stateId] 
         * @param {number | null} [countryId] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        worldCityGet(name?: string | null, id?: number | null, stateId?: number | null, countryId?: number | null, pageIndex?: number, pageSize?: number, options?: any): AxiosPromise<CityResponse> {
            return localVarFp.worldCityGet(name, id, stateId, countryId, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  World Country
         * @param {string | null} [name] 
         * @param {number | null} [id] 
         * @param {number | null} [subRegionId] 
         * @param {number | null} [regionId] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        worldCountryGet(name?: string | null, id?: number | null, subRegionId?: number | null, regionId?: number | null, pageIndex?: number, pageSize?: number, options?: any): AxiosPromise<CountryResponse> {
            return localVarFp.worldCountryGet(name, id, subRegionId, regionId, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  World Region
         * @param {string | null} [name] 
         * @param {number | null} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        worldRegionGet(name?: string | null, id?: number | null, options?: any): AxiosPromise<RegionResponse> {
            return localVarFp.worldRegionGet(name, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  World State
         * @param {string | null} [name] 
         * @param {number | null} [id] 
         * @param {number | null} [countryId] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        worldStateGet(name?: string | null, id?: number | null, countryId?: number | null, pageIndex?: number, pageSize?: number, options?: any): AxiosPromise<StateResponse> {
            return localVarFp.worldStateGet(name, id, countryId, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  World Sub Region
         * @param {string | null} [name] 
         * @param {number | null} [id] 
         * @param {number | null} [regionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        worldSubRegionGet(name?: string | null, id?: number | null, regionId?: number | null, options?: any): AxiosPromise<SubRegionResponse> {
            return localVarFp.worldSubRegionGet(name, id, regionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary  Healthz
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthzGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthzGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  World City
     * @param {string | null} [name] 
     * @param {number | null} [id] 
     * @param {number | null} [stateId] 
     * @param {number | null} [countryId] 
     * @param {number} [pageIndex] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public worldCityGet(name?: string | null, id?: number | null, stateId?: number | null, countryId?: number | null, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).worldCityGet(name, id, stateId, countryId, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  World Country
     * @param {string | null} [name] 
     * @param {number | null} [id] 
     * @param {number | null} [subRegionId] 
     * @param {number | null} [regionId] 
     * @param {number} [pageIndex] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public worldCountryGet(name?: string | null, id?: number | null, subRegionId?: number | null, regionId?: number | null, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).worldCountryGet(name, id, subRegionId, regionId, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  World Region
     * @param {string | null} [name] 
     * @param {number | null} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public worldRegionGet(name?: string | null, id?: number | null, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).worldRegionGet(name, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  World State
     * @param {string | null} [name] 
     * @param {number | null} [id] 
     * @param {number | null} [countryId] 
     * @param {number} [pageIndex] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public worldStateGet(name?: string | null, id?: number | null, countryId?: number | null, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).worldStateGet(name, id, countryId, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  World Sub Region
     * @param {string | null} [name] 
     * @param {number | null} [id] 
     * @param {number | null} [regionId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public worldSubRegionGet(name?: string | null, id?: number | null, regionId?: number | null, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).worldSubRegionGet(name, id, regionId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PlanApi - axios parameter creator
 * @export
 */
export const PlanApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary  Plan
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/plan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  Plan
         * @param {string} planId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planIdDelete: async (planId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'planId' is not null or undefined
            assertParamExists('planIdDelete', 'planId', planId)
            const localVarPath = `/plan/{plan_id}`
                .replace(`{${"plan_id"}}`, encodeURIComponent(String(planId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  Plan
         * @param {string} planId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planIdGet: async (planId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'planId' is not null or undefined
            assertParamExists('planIdGet', 'planId', planId)
            const localVarPath = `/plan/{plan_id}`
                .replace(`{${"plan_id"}}`, encodeURIComponent(String(planId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  Plan
         * @param {string} planId 
         * @param {PlanRequest} planRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planIdPut: async (planId: string, planRequest: PlanRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'planId' is not null or undefined
            assertParamExists('planIdPut', 'planId', planId)
            // verify required parameter 'planRequest' is not null or undefined
            assertParamExists('planIdPut', 'planRequest', planRequest)
            const localVarPath = `/plan/{plan_id}`
                .replace(`{${"plan_id"}}`, encodeURIComponent(String(planId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(planRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  Plan
         * @param {PlanRequest} planRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planPost: async (planRequest: PlanRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'planRequest' is not null or undefined
            assertParamExists('planPost', 'planRequest', planRequest)
            const localVarPath = `/plan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(planRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlanApi - functional programming interface
 * @export
 */
export const PlanApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlanApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary  Plan
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanMultipleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanApi.planGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary  Plan
         * @param {string} planId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planIdDelete(planId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanMultipleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planIdDelete(planId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanApi.planIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary  Plan
         * @param {string} planId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planIdGet(planId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanSingleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planIdGet(planId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanApi.planIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary  Plan
         * @param {string} planId 
         * @param {PlanRequest} planRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planIdPut(planId: string, planRequest: PlanRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanSingleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planIdPut(planId, planRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanApi.planIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary  Plan
         * @param {PlanRequest} planRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planPost(planRequest: PlanRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanSingleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planPost(planRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanApi.planPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PlanApi - factory interface
 * @export
 */
export const PlanApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlanApiFp(configuration)
    return {
        /**
         * 
         * @summary  Plan
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planGet(options?: any): AxiosPromise<PlanMultipleResponse> {
            return localVarFp.planGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  Plan
         * @param {string} planId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planIdDelete(planId: string, options?: any): AxiosPromise<PlanMultipleResponse> {
            return localVarFp.planIdDelete(planId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  Plan
         * @param {string} planId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planIdGet(planId: string, options?: any): AxiosPromise<PlanSingleResponse> {
            return localVarFp.planIdGet(planId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  Plan
         * @param {string} planId 
         * @param {PlanRequest} planRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planIdPut(planId: string, planRequest: PlanRequest, options?: any): AxiosPromise<PlanSingleResponse> {
            return localVarFp.planIdPut(planId, planRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  Plan
         * @param {PlanRequest} planRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planPost(planRequest: PlanRequest, options?: any): AxiosPromise<PlanSingleResponse> {
            return localVarFp.planPost(planRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlanApi - object-oriented interface
 * @export
 * @class PlanApi
 * @extends {BaseAPI}
 */
export class PlanApi extends BaseAPI {
    /**
     * 
     * @summary  Plan
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanApi
     */
    public planGet(options?: RawAxiosRequestConfig) {
        return PlanApiFp(this.configuration).planGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  Plan
     * @param {string} planId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanApi
     */
    public planIdDelete(planId: string, options?: RawAxiosRequestConfig) {
        return PlanApiFp(this.configuration).planIdDelete(planId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  Plan
     * @param {string} planId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanApi
     */
    public planIdGet(planId: string, options?: RawAxiosRequestConfig) {
        return PlanApiFp(this.configuration).planIdGet(planId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  Plan
     * @param {string} planId 
     * @param {PlanRequest} planRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanApi
     */
    public planIdPut(planId: string, planRequest: PlanRequest, options?: RawAxiosRequestConfig) {
        return PlanApiFp(this.configuration).planIdPut(planId, planRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  Plan
     * @param {PlanRequest} planRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanApi
     */
    public planPost(planRequest: PlanRequest, options?: RawAxiosRequestConfig) {
        return PlanApiFp(this.configuration).planPost(planRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



